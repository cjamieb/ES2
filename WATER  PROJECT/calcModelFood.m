function model = calcModelFood(country, model)

% FUNCTION: calcFoodBreakdown
% INPUTS:
% - country: the dataframe of values associated with the countries
% - model: the dataframe of values associated with the model
%   note: expected that both "Total Food Demand" and "Percent Food from Renewable"
%         have already been set in the model
% OUTPUTS:
% - model: the updated dataframe of values associated with the model
%   note: see calculations performed for new model values created
% CALCULATIONS PERFORMED:
%   based on the "Total Food Demand", "Percent Food from Renewable", and various
%   default country information (e.g. "Existing Renewable Food Capacity"), generate the following:
% - "Amount Food from Existing Renewable": the amount of food generated by/from existing renewable capabilities
% - "Amount Food from New Renewable": the amount of food generated by/from new renewable sources (developed via investment)
% - "Amount Food from Nonrenewable": the amount of food generated by/from non-renewable sources (aka "everything else" that's not renewable)

% how much total renewable food is needed
model.Renew_Food_Tot = model.Pct_Food_fr_Renew .* model.Tot_Food_Demand;

% the amount of non-remewable food is "everything not generated by renewable",
% so calculate this based on total food demand
model.Amt_Food_fr_Nonrenew = model.Tot_Food_Demand - model.Renew_Food_Tot;

% need to know capacity: country.Exist_Renew_Food_Capac
% and what you want from renewables: model.Renew_Food_Tot
% check if the amount of renewable you want is above current capacity
% if it's above the capacity, then set the amount from existing at the capacity
% if it's below the capacity, then set it at the existing amt.

% check each country one at a time
for i = 1:2
    if model.Renew_Food_Tot(i) > country.Exist_Renew_Food_Capac(i)
        model.Amt_Food_fr_Exist_Renew(i) = country.Exist_Renew_Food_Capac(i);
    else
        model.Amt_Food_fr_Exist_Renew(i) = model.Renew_Food_Tot(i);
    end
end

% the INVESTMENT amount (New Renewable) is any renewable food that is not generated by "Existing Renewable Capacity"
model.Amt_Food_fr_New_Renew = model.Renew_Food_Tot - model.Amt_Food_fr_Exist_Renew;


% FUNCTION: newRenewableFCR
%   note: this is an instructor provided function for generating the Food Cost Rate (FCR) for
%      new renewable farming (via investment)
% INPUTS:
% - country: the dataframe of values associated with the countries
% - model: the dataframe of values associated with the model
%   note: assuming "Amount Food from New Renewable" and "Amount Food from Nonrenewable" both exist
% OUTPUTS:
% - rate: the Food Cost Rate (FCR) for calculating new renewable cost
% USE EXAMPLE:
% - model["Cost Food from New Renewable"] = model["Amount Food from New Renewable"] * newRenewableFCR(country, model)

% return variable rate: the more you invest (more of your food from renewable), the more it costs
R_nonrenewable = country.FCR_Food_fr_Nonrenew;
% determine amount investment (investment over investment + nonrenewable)
percent_food_investment = model.Amt_Food_fr_New_Renew ./ ( model.Amt_Food_fr_New_Renew + model.Amt_Food_fr_Nonrenew );
alpha = 1; % ability to tweak curve if needed
% adjust R-of-nonrenewable bsaed on how much renewable is being invested
R_FCR = (1 + alpha + percent_food_investment) .* R_nonrenewable;

% FUNCTION: calcFoodCosts
% INPUTS:
% - country: the dataframe of values associated with the countries
% - model: the dataframe of values associated with the model
%   note: expected that "Amount Food from Existing Renewable", "Amount Food from New Renewable",
%   and "Amount Food from Nonrenewable" have been created within the model
% OUTPUTS:
% - model: the updated dataframe of values associated with the model
%   note: see calculations performed for new model values created
% CALCULATIONS PERFORMED:
%   based on various food amounts, calculate the following and add the values to the model
%   NOTE: the FCR for New Renewable (aka cost of investment) is a *variable/non-linear* rate
%      given by the (instructor provided) newRenewableFCR function
% - "Cost Food from Existing Renewable": float value of the cost of renewable food generated by existing capabilities (in $USD)
% - "Cost Food from New Renewable": float value of the cost of renewable food generated via new sources, developed via investment in renewable farms (in $USD). This is where you will need the newRenewableFCR function
% - "Cost Food from Nonrenewable": float value of the cost of food generated via nonrenewable sources (in $USD)
% - "Cost Food Total": float value of the TOTAL cost of food across all three sources (in $USD)

% based on amounts (and rates), calculate costs:
model.Cost_Food_fr_Exist_Renew =  model.Amt_Food_fr_Exist_Renew .* country.FCR_Food_fr_Exist_Renew;
model.Cost_Food_fr_New_Renew = model.Amt_Food_fr_New_Renew .* R_FCR;
model.Cost_Food_fr_Nonrenew = model.Amt_Food_fr_Nonrenew .* country.FCR_Food_fr_Nonrenew;
% Cost Food Total is sum of the three sub-costs:
model.Cost_Food_Tot = model.Cost_Food_fr_Exist_Renew + model.Cost_Food_fr_New_Renew + model.Cost_Food_fr_Nonrenew;


% FUNCTION: newRenewableWRC
%   note: this is an instructor provided function for generating the Water Required Coefficient (WRC) for
%      new renewable farming (via investment)
% INPUTS:
% - country: the dataframe of values associated with the countries
% - model: the dataframe of values associated with the model
%   note: assuming "Amount Food from New Renewable" and "Amount Food from Nonrenewable" both exist
% OUTPUTS:
% - rate: the Water Required Coefficient (WRC) for calculating new renewable cost
% USE EXAMPLE:
% - model["Water Required for Food from New Renewable"] = model["Amount Food from New Renewable"] * newRenewableWRC(country, model)


% return variable rate: the more you invest (more of your food from renewable farms) the better the water rate!
R_nonrenewable = country.WRC_Food_fr_Nonrenew;
% determine amount investment (investment over investment + nonrenewable)
percent_food_investment = model.Amt_Food_fr_New_Renew ./ (model.Amt_Food_fr_New_Renew + model.Amt_Food_fr_Nonrenew);
% adjust based on amount of renewable
a = 1;
b = 1;
cos_vals = (percent_food_investment .* pi) ./ b;
R_WRC = R_nonrenewable .* (a .* ((cos(cos_vals) + 1) ./ 2)); % return the Water Required Coefficient (WRC) for new renewable


% FUNCTION: calcWaterRequiredFood
% INPUTS:
% - country: the dataframe of values associated with the countries
% - model: the dataframe of values associated with the model
%   note: expected that "Amount Food from Existing Renewable", "Amount Food from New Renewable",
%   and "Amount Food from Nonrenewable" have been created within the model
% OUTPUTS:
% - model: the updated dataframe of values associated with the model
%   note: see calculations performed for new model values created
% CALCULATIONS PERFORMED:
%   based on various food amounts, calculate the following and add the values to the model
%   note: the WRC for New Renewable (aka water required for new renewable food) is a *variable/non-linear* rate
%      given by the (instructor provided) newRenewableWRC function
% - "Water Required for Food from Existing Renewable": float value of the water required for renewable food generated by existing capabilities (in cubic km)
% - "Water Required for Food from New Renewable": float value of the water required for renewable food generated by new renewable capabilities (in cubic km)
% - "Water Required for Food from from Nonrenewable": float value of the water required for food generated by nonrenewable capabilities (in cubic km)
% - "Water Required for Food": float value of the TOTAL amount of water required for food across all three sources (in cubic km)


model.Water_Reqd_for_Food_fr_Exist_Renew = model.Amt_Food_fr_Exist_Renew .* country.WRC_Food_fr_Exist_Renew;
model.Water_Reqd_for_Food_fr_New_Renew = model.Amt_Food_fr_New_Renew .* R_WRC;
model.Water_Reqd_for_Food_fr_Nonrenew = model.Amt_Food_fr_Nonrenew .* country.WRC_Food_fr_Nonrenew;
% total is the sum of previous three:
model.Water_Reqd_Food = model.Water_Reqd_for_Food_fr_Exist_Renew  + model.Water_Reqd_for_Food_fr_New_Renew + model.Water_Reqd_for_Food_fr_Nonrenew;








